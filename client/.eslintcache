[{"C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\index.tsx":"1","C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\App.tsx":"2","C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\components\\YoutubeWrapper.tsx":"3"},{"size":623,"mtime":1613599708435,"results":"4","hashOfConfig":"5"},{"size":516,"mtime":1613602602306,"results":"6","hashOfConfig":"5"},{"size":1453,"mtime":1613603172870,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"v0ro5s",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\index.tsx",[],["16","17"],"C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\App.tsx",[],"C:\\Users\\langt\\Google Drive\\Gech\\virtual-checkin\\client\\src\\components\\YoutubeWrapper.tsx",["18"],"import React, { useState } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nfunction _get_state_text(state: any) {\r\n  if (state === 0) {\r\n    return \"ended\";\r\n  } else if (state === 1) {\r\n    return \"playing\"\r\n  } else if (state === 2) {\r\n    return \"paused\"\r\n  } else if (state === 3) {\r\n    return \"buffering\"\r\n  } else if (state === 5) {\r\n    return \"video cued\"\r\n  } else if (state === -1) {\r\n    return \"unstarted\"\r\n  } \r\n  return \"unknown\"\r\n}\r\n\r\nfunction _get_youtube_id(event_id: string) {\r\n  return \"QH2-TGUlwu4\"\r\n  return event_id\r\n}\r\n\r\nconst YoutubeWrapper: React.FC = () => {\r\n\r\n  let params: any = useParams(); // TODO handle type of video\r\n  let eventID: string = params.id;\r\n  let eventURL: string = _get_youtube_id(eventID);\r\n\r\n  const [isMuted, setIsMuted] = useState<String>('');\r\n  const [playerState, setPlayerState] = useState<String>('');\r\n\r\n  function _onChange(event: any) {\r\n    let player_state = _get_state_text(event.data)\r\n    let is_muted = String(event.target.isMuted())\r\n\r\n    setIsMuted(is_muted);\r\n    setPlayerState(player_state);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <YouTube videoId={eventURL} opts={{height: '390', width: '640', playerVars: {autoplay: 1,}}} onStateChange={_onChange}/>\r\n      <div>\r\n        Player State: {playerState}\r\n      </div>\r\n      <div>\r\n        Is Muted: {isMuted}\r\n      </div>\r\n    </div>\r\n  )\r\n  }\r\n\r\nexport default YoutubeWrapper;\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":25,"column":3,"nodeType":"25","messageId":"26","endLine":25,"endColumn":18},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation"]